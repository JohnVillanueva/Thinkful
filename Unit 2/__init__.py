{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.insert(0, '/data')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'countrydf_raw' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-4-7f147ab28c48>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcountrydf_raw\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'countrydf_raw' is not defined"
     ]
    }
   ],
   "source": [
    "countrydf_raw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] File b'Unit 2/Data Sets for Visualization/countries of the world.csv' does not exist: b'Unit 2/Data Sets for Visualization/countries of the world.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-12-499f2928afaa>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcountrydf_raw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Unit 2/Data Sets for Visualization/countries of the world.csv'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdecimal\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\",\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mparser_f\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    700\u001b[0m                     skip_blank_lines=skip_blank_lines)\n\u001b[1;32m    701\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 702\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    703\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    704\u001b[0m     \u001b[0mparser_f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    427\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    428\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 429\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    430\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    431\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'has_index_names'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'has_index_names'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1120\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'c'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1121\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'c'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1122\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1123\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1124\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'python'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   1851\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'usecols'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0musecols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1852\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1853\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1854\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1855\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._setup_parser_source\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] File b'Unit 2/Data Sets for Visualization/countries of the world.csv' does not exist: b'Unit 2/Data Sets for Visualization/countries of the world.csv'"
     ]
    }
   ],
   "source": [
    "countrydf_raw = pd.read_csv('Unit 2/Data Sets for Visualization/countries of the world.csv', decimal=\",\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "countrydf = countrydf_raw.iloc[:,:10].dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "countrydf = countrydf[countrydf['Pop. Density (per sq. mi.)'] < 5000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "Can only use .str accessor with string values, which use np.object_ dtype in pandas",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-9-c11dae05545a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcountrydf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Pop. Density (per sq. mi.)'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcountrydf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Pop. Density (per sq. mi.)'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m','\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mcountrydf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Pop. Density (per sq. mi.)'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcountrydf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Pop. Density (per sq. mi.)'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5061\u001b[0m         if (name in self._internal_names_set or name in self._metadata or\n\u001b[1;32m   5062\u001b[0m                 name in self._accessors):\n\u001b[0;32m-> 5063\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5064\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5065\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/accessor.py\u001b[0m in \u001b[0;36m__get__\u001b[0;34m(self, obj, cls)\u001b[0m\n\u001b[1;32m    169\u001b[0m             \u001b[0;31m# we're accessing the attribute of the class, i.e., Dataset.geo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    170\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_accessor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 171\u001b[0;31m         \u001b[0maccessor_obj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_accessor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    172\u001b[0m         \u001b[0;31m# Replace the property with the accessor object. Inspired by:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    173\u001b[0m         \u001b[0;31m# http://www.pydanny.com/cached-property.html\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/strings.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m   1794\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1795\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1796\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1797\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_categorical\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mis_categorical_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1798\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/strings.py\u001b[0m in \u001b[0;36m_validate\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m   1816\u001b[0m             \u001b[0;31m# (instead of test for object dtype), but that isn't practical for\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1817\u001b[0m             \u001b[0;31m# performance reasons until we have a str dtype (GH 9343)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1818\u001b[0;31m             raise AttributeError(\"Can only use .str accessor with string \"\n\u001b[0m\u001b[1;32m   1819\u001b[0m                                  \u001b[0;34m\"values, which use np.object_ dtype in \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1820\u001b[0m                                  \"pandas\")\n",
      "\u001b[0;31mAttributeError\u001b[0m: Can only use .str accessor with string values, which use np.object_ dtype in pandas"
     ]
    }
   ],
   "source": [
    "countrydf['Pop. Density (per sq. mi.)'] = countrydf['Pop. Density (per sq. mi.)'].str.replace(',','.')\n",
    "\n",
    "\n",
    "countrydf['Pop. Density (per sq. mi.)'] = countrydf['Pop. Density (per sq. mi.)'].apply(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Pop. Density (per sq. mi.)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>129</th>\n",
       "      <td>Malta</td>\n",
       "      <td>1266.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Bermuda</td>\n",
       "      <td>1241.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>Maldives</td>\n",
       "      <td>1196.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Bahrain</td>\n",
       "      <td>1050.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>1023.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Country  Pop. Density (per sq. mi.)\n",
       "129       Malta                       1266.5\n",
       "22      Bermuda                       1241.0\n",
       "127    Maldives                       1196.7\n",
       "15      Bahrain                       1050.5\n",
       "16   Bangladesh                       1023.4"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "countrydf[[\"Country\",'Pop. Density (per sq. mi.)']].sort_values(ascending = False, by ='Pop. Density (per sq. mi.)').head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(\n",
    "    x=countrydf['GDP ($ per capita)'],\n",
    "    y=countrydf['Pop. Density (per sq. mi.)'],\n",
    "    color='red')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Country Literacy vs. Infant Mortality')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(\n",
    "    x=countrydf['Literacy (%)'],\n",
    "    y=countrydf['Infant mortality (per 1000 births)'],\n",
    "    color='red')\n",
    "plt.title('Country Literacy vs. Infant Mortality')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "admisdf = pd.read_csv('Data Sets for Visualization/graduate-admissions/Admission_Predict_Ver1.1.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "suicidedf = pd.read_csv('Data Sets for Visualization/suiciderates.csv')\n",
    "suicidedf['country'] = suicidedf['country-year'].str.replace('\\d+', '')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>year</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>suicides_no</th>\n",
       "      <th>population</th>\n",
       "      <th>suicides/100k pop</th>\n",
       "      <th>country-year</th>\n",
       "      <th>HDI for year</th>\n",
       "      <th>gdp_for_year ($)</th>\n",
       "      <th>gdp_per_capita ($)</th>\n",
       "      <th>generation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Albania</td>\n",
       "      <td>1987</td>\n",
       "      <td>male</td>\n",
       "      <td>15-24 years</td>\n",
       "      <td>21</td>\n",
       "      <td>312900</td>\n",
       "      <td>6.71</td>\n",
       "      <td>Albania1987</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2,156,624,900</td>\n",
       "      <td>796</td>\n",
       "      <td>Generation X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Albania</td>\n",
       "      <td>1987</td>\n",
       "      <td>male</td>\n",
       "      <td>35-54 years</td>\n",
       "      <td>16</td>\n",
       "      <td>308000</td>\n",
       "      <td>5.19</td>\n",
       "      <td>Albania1987</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2,156,624,900</td>\n",
       "      <td>796</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Albania</td>\n",
       "      <td>1987</td>\n",
       "      <td>female</td>\n",
       "      <td>15-24 years</td>\n",
       "      <td>14</td>\n",
       "      <td>289700</td>\n",
       "      <td>4.83</td>\n",
       "      <td>Albania1987</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2,156,624,900</td>\n",
       "      <td>796</td>\n",
       "      <td>Generation X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>1987</td>\n",
       "      <td>male</td>\n",
       "      <td>75+ years</td>\n",
       "      <td>1</td>\n",
       "      <td>21800</td>\n",
       "      <td>4.59</td>\n",
       "      <td>Albania1987</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2,156,624,900</td>\n",
       "      <td>796</td>\n",
       "      <td>G.I. Generation</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albania</td>\n",
       "      <td>1987</td>\n",
       "      <td>male</td>\n",
       "      <td>25-34 years</td>\n",
       "      <td>9</td>\n",
       "      <td>274300</td>\n",
       "      <td>3.28</td>\n",
       "      <td>Albania1987</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2,156,624,900</td>\n",
       "      <td>796</td>\n",
       "      <td>Boomers</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   country  year     sex          age  suicides_no  population  \\\n",
       "0  Albania  1987    male  15-24 years           21      312900   \n",
       "1  Albania  1987    male  35-54 years           16      308000   \n",
       "2  Albania  1987  female  15-24 years           14      289700   \n",
       "3  Albania  1987    male    75+ years            1       21800   \n",
       "4  Albania  1987    male  25-34 years            9      274300   \n",
       "\n",
       "   suicides/100k pop country-year  HDI for year  gdp_for_year ($)   \\\n",
       "0               6.71  Albania1987           NaN      2,156,624,900   \n",
       "1               5.19  Albania1987           NaN      2,156,624,900   \n",
       "2               4.83  Albania1987           NaN      2,156,624,900   \n",
       "3               4.59  Albania1987           NaN      2,156,624,900   \n",
       "4               3.28  Albania1987           NaN      2,156,624,900   \n",
       "\n",
       "   gdp_per_capita ($)       generation  \n",
       "0                 796     Generation X  \n",
       "1                 796           Silent  \n",
       "2                 796     Generation X  \n",
       "3                 796  G.I. Generation  \n",
       "4                 796          Boomers  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "suicidedf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "year_suicidedf = suicidedf.groupby('year')['suicides_no', 'population'].sum()\n",
    "year_suicidedf['global rate (suicides per 100000)'] = year_suicidedf['suicides_no'] / year_suicidedf['population'] *100000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Suicides per 100000 People')"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(year_suicidedf['global rate (suicides per 100000)'], color='purple')\n",
    "plt.title('Global Suicide Rate')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Suicides per 100000 People')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The graph above depicts the global suicide rate over time. Beginning in the late 80's the global suicide rate began a rapid increase until 1995 where it began to steadily decrease until 2015. This graphs raises the questions of why the global suicide rates inclined and declined so steadily."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Albania1987', 'Albania1988', 'Albania1989', ..., 'Uzbekistan2012',\n",
       "       'Uzbekistan2013', 'Uzbekistan2014'], dtype=object)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "suicidedf[\"country-year\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "year\n",
       "1985     576\n",
       "1986     576\n",
       "1987     648\n",
       "1988     588\n",
       "1989     624\n",
       "1990     768\n",
       "1991     768\n",
       "1992     780\n",
       "1993     780\n",
       "1994     816\n",
       "1995     936\n",
       "1996     924\n",
       "1997     924\n",
       "1998     948\n",
       "1999     996\n",
       "2000    1032\n",
       "2001    1056\n",
       "2002    1032\n",
       "2003    1032\n",
       "2004    1008\n",
       "2005    1008\n",
       "2006    1020\n",
       "2007    1032\n",
       "2008    1020\n",
       "2009    1068\n",
       "2010    1056\n",
       "2011    1032\n",
       "2012     972\n",
       "2013     960\n",
       "2014     936\n",
       "2015     744\n",
       "2016     160\n",
       "Name: year, dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "year_counts_suicidedf = suicidedf.groupby(\"year\")[\"year\"].size()\n",
    "year_counts_suicidedf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2009 is the year with the data from the most countries. Using only 2009 data, we maximize how many countries that will contribute the our Suicide Rate vs. GDPpc "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>year</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>suicides_no</th>\n",
       "      <th>population</th>\n",
       "      <th>suicides/100k pop</th>\n",
       "      <th>country-year</th>\n",
       "      <th>HDI for year</th>\n",
       "      <th>gdp_for_year ($)</th>\n",
       "      <th>gdp_per_capita ($)</th>\n",
       "      <th>generation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>240</th>\n",
       "      <td>Albania</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>15-24 years</td>\n",
       "      <td>0</td>\n",
       "      <td>270003</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Albania2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,044,212,904</td>\n",
       "      <td>4387</td>\n",
       "      <td>Millenials</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>241</th>\n",
       "      <td>Albania</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>25-34 years</td>\n",
       "      <td>0</td>\n",
       "      <td>182712</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Albania2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,044,212,904</td>\n",
       "      <td>4387</td>\n",
       "      <td>Generation X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242</th>\n",
       "      <td>Albania</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>35-54 years</td>\n",
       "      <td>0</td>\n",
       "      <td>394286</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Albania2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,044,212,904</td>\n",
       "      <td>4387</td>\n",
       "      <td>Boomers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>243</th>\n",
       "      <td>Albania</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>5-14 years</td>\n",
       "      <td>0</td>\n",
       "      <td>236174</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Albania2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,044,212,904</td>\n",
       "      <td>4387</td>\n",
       "      <td>Generation Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>244</th>\n",
       "      <td>Albania</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>55-74 years</td>\n",
       "      <td>0</td>\n",
       "      <td>233302</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Albania2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,044,212,904</td>\n",
       "      <td>4387</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>245</th>\n",
       "      <td>Albania</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>75+ years</td>\n",
       "      <td>0</td>\n",
       "      <td>61582</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Albania2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,044,212,904</td>\n",
       "      <td>4387</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>246</th>\n",
       "      <td>Albania</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>15-24 years</td>\n",
       "      <td>0</td>\n",
       "      <td>283448</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Albania2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,044,212,904</td>\n",
       "      <td>4387</td>\n",
       "      <td>Millenials</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>247</th>\n",
       "      <td>Albania</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>25-34 years</td>\n",
       "      <td>0</td>\n",
       "      <td>174955</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Albania2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,044,212,904</td>\n",
       "      <td>4387</td>\n",
       "      <td>Generation X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>248</th>\n",
       "      <td>Albania</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>35-54 years</td>\n",
       "      <td>0</td>\n",
       "      <td>374365</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Albania2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,044,212,904</td>\n",
       "      <td>4387</td>\n",
       "      <td>Boomers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249</th>\n",
       "      <td>Albania</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>5-14 years</td>\n",
       "      <td>0</td>\n",
       "      <td>253007</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Albania2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,044,212,904</td>\n",
       "      <td>4387</td>\n",
       "      <td>Generation Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>250</th>\n",
       "      <td>Albania</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>55-74 years</td>\n",
       "      <td>0</td>\n",
       "      <td>234570</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Albania2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,044,212,904</td>\n",
       "      <td>4387</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>251</th>\n",
       "      <td>Albania</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>75+ years</td>\n",
       "      <td>0</td>\n",
       "      <td>47331</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Albania2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12,044,212,904</td>\n",
       "      <td>4387</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>528</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>15-24 years</td>\n",
       "      <td>0</td>\n",
       "      <td>8199</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Antigua and Barbuda2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1,224,253,000</td>\n",
       "      <td>14335</td>\n",
       "      <td>Millenials</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>529</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>25-34 years</td>\n",
       "      <td>0</td>\n",
       "      <td>6917</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Antigua and Barbuda2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1,224,253,000</td>\n",
       "      <td>14335</td>\n",
       "      <td>Generation X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>530</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>35-54 years</td>\n",
       "      <td>0</td>\n",
       "      <td>14629</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Antigua and Barbuda2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1,224,253,000</td>\n",
       "      <td>14335</td>\n",
       "      <td>Boomers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>531</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>5-14 years</td>\n",
       "      <td>0</td>\n",
       "      <td>8514</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Antigua and Barbuda2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1,224,253,000</td>\n",
       "      <td>14335</td>\n",
       "      <td>Generation Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>532</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>55-74 years</td>\n",
       "      <td>0</td>\n",
       "      <td>4793</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Antigua and Barbuda2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1,224,253,000</td>\n",
       "      <td>14335</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>533</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>75+ years</td>\n",
       "      <td>0</td>\n",
       "      <td>1571</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Antigua and Barbuda2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1,224,253,000</td>\n",
       "      <td>14335</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>534</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>15-24 years</td>\n",
       "      <td>0</td>\n",
       "      <td>7489</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Antigua and Barbuda2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1,224,253,000</td>\n",
       "      <td>14335</td>\n",
       "      <td>Millenials</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>535</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>25-34 years</td>\n",
       "      <td>0</td>\n",
       "      <td>6325</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Antigua and Barbuda2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1,224,253,000</td>\n",
       "      <td>14335</td>\n",
       "      <td>Generation X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>536</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>35-54 years</td>\n",
       "      <td>0</td>\n",
       "      <td>12978</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Antigua and Barbuda2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1,224,253,000</td>\n",
       "      <td>14335</td>\n",
       "      <td>Boomers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>537</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>5-14 years</td>\n",
       "      <td>0</td>\n",
       "      <td>8599</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Antigua and Barbuda2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1,224,253,000</td>\n",
       "      <td>14335</td>\n",
       "      <td>Generation Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>538</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>55-74 years</td>\n",
       "      <td>0</td>\n",
       "      <td>4349</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Antigua and Barbuda2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1,224,253,000</td>\n",
       "      <td>14335</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>539</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>75+ years</td>\n",
       "      <td>0</td>\n",
       "      <td>1042</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Antigua and Barbuda2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1,224,253,000</td>\n",
       "      <td>14335</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>876</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>75+ years</td>\n",
       "      <td>177</td>\n",
       "      <td>653486</td>\n",
       "      <td>27.09</td>\n",
       "      <td>Argentina2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>332,976,484,578</td>\n",
       "      <td>8961</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>877</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>15-24 years</td>\n",
       "      <td>609</td>\n",
       "      <td>3436265</td>\n",
       "      <td>17.72</td>\n",
       "      <td>Argentina2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>332,976,484,578</td>\n",
       "      <td>8961</td>\n",
       "      <td>Millenials</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>878</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>55-74 years</td>\n",
       "      <td>434</td>\n",
       "      <td>2683502</td>\n",
       "      <td>16.17</td>\n",
       "      <td>Argentina2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>332,976,484,578</td>\n",
       "      <td>8961</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>879</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>25-34 years</td>\n",
       "      <td>504</td>\n",
       "      <td>3210244</td>\n",
       "      <td>15.70</td>\n",
       "      <td>Argentina2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>332,976,484,578</td>\n",
       "      <td>8961</td>\n",
       "      <td>Generation X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>880</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>35-54 years</td>\n",
       "      <td>542</td>\n",
       "      <td>4566645</td>\n",
       "      <td>11.87</td>\n",
       "      <td>Argentina2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>332,976,484,578</td>\n",
       "      <td>8961</td>\n",
       "      <td>Boomers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>881</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>15-24 years</td>\n",
       "      <td>164</td>\n",
       "      <td>3342385</td>\n",
       "      <td>4.91</td>\n",
       "      <td>Argentina2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>332,976,484,578</td>\n",
       "      <td>8961</td>\n",
       "      <td>Millenials</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27142</th>\n",
       "      <td>United States</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>55-74 years</td>\n",
       "      <td>1875</td>\n",
       "      <td>29296258</td>\n",
       "      <td>6.40</td>\n",
       "      <td>United States2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14,418,739,000,000</td>\n",
       "      <td>50563</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27143</th>\n",
       "      <td>United States</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>25-34 years</td>\n",
       "      <td>1027</td>\n",
       "      <td>19992900</td>\n",
       "      <td>5.14</td>\n",
       "      <td>United States2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14,418,739,000,000</td>\n",
       "      <td>50563</td>\n",
       "      <td>Generation X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27144</th>\n",
       "      <td>United States</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>15-24 years</td>\n",
       "      <td>776</td>\n",
       "      <td>21299140</td>\n",
       "      <td>3.64</td>\n",
       "      <td>United States2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14,418,739,000,000</td>\n",
       "      <td>50563</td>\n",
       "      <td>Millenials</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27145</th>\n",
       "      <td>United States</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>75+ years</td>\n",
       "      <td>389</td>\n",
       "      <td>11101144</td>\n",
       "      <td>3.50</td>\n",
       "      <td>United States2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14,418,739,000,000</td>\n",
       "      <td>50563</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27146</th>\n",
       "      <td>United States</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>5-14 years</td>\n",
       "      <td>175</td>\n",
       "      <td>21139852</td>\n",
       "      <td>0.83</td>\n",
       "      <td>United States2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14,418,739,000,000</td>\n",
       "      <td>50563</td>\n",
       "      <td>Generation Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27147</th>\n",
       "      <td>United States</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>5-14 years</td>\n",
       "      <td>90</td>\n",
       "      <td>20181953</td>\n",
       "      <td>0.45</td>\n",
       "      <td>United States2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14,418,739,000,000</td>\n",
       "      <td>50563</td>\n",
       "      <td>Generation Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27484</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>75+ years</td>\n",
       "      <td>59</td>\n",
       "      <td>76759</td>\n",
       "      <td>76.86</td>\n",
       "      <td>Uruguay2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31,660,911,277</td>\n",
       "      <td>10166</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27485</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>55-74 years</td>\n",
       "      <td>99</td>\n",
       "      <td>253331</td>\n",
       "      <td>39.08</td>\n",
       "      <td>Uruguay2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31,660,911,277</td>\n",
       "      <td>10166</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27486</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>25-34 years</td>\n",
       "      <td>79</td>\n",
       "      <td>238754</td>\n",
       "      <td>33.09</td>\n",
       "      <td>Uruguay2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31,660,911,277</td>\n",
       "      <td>10166</td>\n",
       "      <td>Generation X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27487</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>35-54 years</td>\n",
       "      <td>107</td>\n",
       "      <td>401900</td>\n",
       "      <td>26.62</td>\n",
       "      <td>Uruguay2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31,660,911,277</td>\n",
       "      <td>10166</td>\n",
       "      <td>Boomers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27488</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>15-24 years</td>\n",
       "      <td>64</td>\n",
       "      <td>260287</td>\n",
       "      <td>24.59</td>\n",
       "      <td>Uruguay2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31,660,911,277</td>\n",
       "      <td>10166</td>\n",
       "      <td>Millenials</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27489</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>75+ years</td>\n",
       "      <td>14</td>\n",
       "      <td>147420</td>\n",
       "      <td>9.50</td>\n",
       "      <td>Uruguay2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31,660,911,277</td>\n",
       "      <td>10166</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27490</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>55-74 years</td>\n",
       "      <td>28</td>\n",
       "      <td>306049</td>\n",
       "      <td>9.15</td>\n",
       "      <td>Uruguay2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31,660,911,277</td>\n",
       "      <td>10166</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27491</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>35-54 years</td>\n",
       "      <td>35</td>\n",
       "      <td>424092</td>\n",
       "      <td>8.25</td>\n",
       "      <td>Uruguay2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31,660,911,277</td>\n",
       "      <td>10166</td>\n",
       "      <td>Boomers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27492</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>15-24 years</td>\n",
       "      <td>13</td>\n",
       "      <td>251731</td>\n",
       "      <td>5.16</td>\n",
       "      <td>Uruguay2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31,660,911,277</td>\n",
       "      <td>10166</td>\n",
       "      <td>Millenials</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27493</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>25-34 years</td>\n",
       "      <td>12</td>\n",
       "      <td>237146</td>\n",
       "      <td>5.06</td>\n",
       "      <td>Uruguay2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31,660,911,277</td>\n",
       "      <td>10166</td>\n",
       "      <td>Generation X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27494</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>5-14 years</td>\n",
       "      <td>1</td>\n",
       "      <td>253321</td>\n",
       "      <td>0.39</td>\n",
       "      <td>Uruguay2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31,660,911,277</td>\n",
       "      <td>10166</td>\n",
       "      <td>Generation Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27495</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>5-14 years</td>\n",
       "      <td>0</td>\n",
       "      <td>263516</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Uruguay2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31,660,911,277</td>\n",
       "      <td>10166</td>\n",
       "      <td>Generation Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27748</th>\n",
       "      <td>Uzbekistan</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>35-54 years</td>\n",
       "      <td>404</td>\n",
       "      <td>3072025</td>\n",
       "      <td>13.15</td>\n",
       "      <td>Uzbekistan2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33,689,223,673</td>\n",
       "      <td>1332</td>\n",
       "      <td>Boomers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27749</th>\n",
       "      <td>Uzbekistan</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>25-34 years</td>\n",
       "      <td>252</td>\n",
       "      <td>2295850</td>\n",
       "      <td>10.98</td>\n",
       "      <td>Uzbekistan2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33,689,223,673</td>\n",
       "      <td>1332</td>\n",
       "      <td>Generation X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27750</th>\n",
       "      <td>Uzbekistan</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>55-74 years</td>\n",
       "      <td>81</td>\n",
       "      <td>985960</td>\n",
       "      <td>8.22</td>\n",
       "      <td>Uzbekistan2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33,689,223,673</td>\n",
       "      <td>1332</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27751</th>\n",
       "      <td>Uzbekistan</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>15-24 years</td>\n",
       "      <td>242</td>\n",
       "      <td>3176656</td>\n",
       "      <td>7.62</td>\n",
       "      <td>Uzbekistan2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33,689,223,673</td>\n",
       "      <td>1332</td>\n",
       "      <td>Millenials</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27752</th>\n",
       "      <td>Uzbekistan</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>15-24 years</td>\n",
       "      <td>186</td>\n",
       "      <td>3079271</td>\n",
       "      <td>6.04</td>\n",
       "      <td>Uzbekistan2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33,689,223,673</td>\n",
       "      <td>1332</td>\n",
       "      <td>Millenials</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27753</th>\n",
       "      <td>Uzbekistan</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>25-34 years</td>\n",
       "      <td>85</td>\n",
       "      <td>2313972</td>\n",
       "      <td>3.67</td>\n",
       "      <td>Uzbekistan2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33,689,223,673</td>\n",
       "      <td>1332</td>\n",
       "      <td>Generation X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27754</th>\n",
       "      <td>Uzbekistan</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>75+ years</td>\n",
       "      <td>7</td>\n",
       "      <td>192006</td>\n",
       "      <td>3.65</td>\n",
       "      <td>Uzbekistan2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33,689,223,673</td>\n",
       "      <td>1332</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27755</th>\n",
       "      <td>Uzbekistan</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>75+ years</td>\n",
       "      <td>7</td>\n",
       "      <td>318983</td>\n",
       "      <td>2.19</td>\n",
       "      <td>Uzbekistan2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33,689,223,673</td>\n",
       "      <td>1332</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27756</th>\n",
       "      <td>Uzbekistan</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>35-54 years</td>\n",
       "      <td>65</td>\n",
       "      <td>3263931</td>\n",
       "      <td>1.99</td>\n",
       "      <td>Uzbekistan2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33,689,223,673</td>\n",
       "      <td>1332</td>\n",
       "      <td>Boomers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27757</th>\n",
       "      <td>Uzbekistan</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>55-74 years</td>\n",
       "      <td>15</td>\n",
       "      <td>1105076</td>\n",
       "      <td>1.36</td>\n",
       "      <td>Uzbekistan2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33,689,223,673</td>\n",
       "      <td>1332</td>\n",
       "      <td>Silent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27758</th>\n",
       "      <td>Uzbekistan</td>\n",
       "      <td>2009</td>\n",
       "      <td>male</td>\n",
       "      <td>5-14 years</td>\n",
       "      <td>37</td>\n",
       "      <td>2805898</td>\n",
       "      <td>1.32</td>\n",
       "      <td>Uzbekistan2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33,689,223,673</td>\n",
       "      <td>1332</td>\n",
       "      <td>Generation Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27759</th>\n",
       "      <td>Uzbekistan</td>\n",
       "      <td>2009</td>\n",
       "      <td>female</td>\n",
       "      <td>5-14 years</td>\n",
       "      <td>18</td>\n",
       "      <td>2678474</td>\n",
       "      <td>0.67</td>\n",
       "      <td>Uzbekistan2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33,689,223,673</td>\n",
       "      <td>1332</td>\n",
       "      <td>Generation Z</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1068 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   country  year     sex          age  suicides_no  \\\n",
       "240                Albania  2009  female  15-24 years            0   \n",
       "241                Albania  2009  female  25-34 years            0   \n",
       "242                Albania  2009  female  35-54 years            0   \n",
       "243                Albania  2009  female   5-14 years            0   \n",
       "244                Albania  2009  female  55-74 years            0   \n",
       "245                Albania  2009  female    75+ years            0   \n",
       "246                Albania  2009    male  15-24 years            0   \n",
       "247                Albania  2009    male  25-34 years            0   \n",
       "248                Albania  2009    male  35-54 years            0   \n",
       "249                Albania  2009    male   5-14 years            0   \n",
       "250                Albania  2009    male  55-74 years            0   \n",
       "251                Albania  2009    male    75+ years            0   \n",
       "528    Antigua and Barbuda  2009  female  15-24 years            0   \n",
       "529    Antigua and Barbuda  2009  female  25-34 years            0   \n",
       "530    Antigua and Barbuda  2009  female  35-54 years            0   \n",
       "531    Antigua and Barbuda  2009  female   5-14 years            0   \n",
       "532    Antigua and Barbuda  2009  female  55-74 years            0   \n",
       "533    Antigua and Barbuda  2009  female    75+ years            0   \n",
       "534    Antigua and Barbuda  2009    male  15-24 years            0   \n",
       "535    Antigua and Barbuda  2009    male  25-34 years            0   \n",
       "536    Antigua and Barbuda  2009    male  35-54 years            0   \n",
       "537    Antigua and Barbuda  2009    male   5-14 years            0   \n",
       "538    Antigua and Barbuda  2009    male  55-74 years            0   \n",
       "539    Antigua and Barbuda  2009    male    75+ years            0   \n",
       "876              Argentina  2009    male    75+ years          177   \n",
       "877              Argentina  2009    male  15-24 years          609   \n",
       "878              Argentina  2009    male  55-74 years          434   \n",
       "879              Argentina  2009    male  25-34 years          504   \n",
       "880              Argentina  2009    male  35-54 years          542   \n",
       "881              Argentina  2009  female  15-24 years          164   \n",
       "...                    ...   ...     ...          ...          ...   \n",
       "27142        United States  2009  female  55-74 years         1875   \n",
       "27143        United States  2009  female  25-34 years         1027   \n",
       "27144        United States  2009  female  15-24 years          776   \n",
       "27145        United States  2009  female    75+ years          389   \n",
       "27146        United States  2009    male   5-14 years          175   \n",
       "27147        United States  2009  female   5-14 years           90   \n",
       "27484              Uruguay  2009    male    75+ years           59   \n",
       "27485              Uruguay  2009    male  55-74 years           99   \n",
       "27486              Uruguay  2009    male  25-34 years           79   \n",
       "27487              Uruguay  2009    male  35-54 years          107   \n",
       "27488              Uruguay  2009    male  15-24 years           64   \n",
       "27489              Uruguay  2009  female    75+ years           14   \n",
       "27490              Uruguay  2009  female  55-74 years           28   \n",
       "27491              Uruguay  2009  female  35-54 years           35   \n",
       "27492              Uruguay  2009  female  15-24 years           13   \n",
       "27493              Uruguay  2009  female  25-34 years           12   \n",
       "27494              Uruguay  2009  female   5-14 years            1   \n",
       "27495              Uruguay  2009    male   5-14 years            0   \n",
       "27748           Uzbekistan  2009    male  35-54 years          404   \n",
       "27749           Uzbekistan  2009    male  25-34 years          252   \n",
       "27750           Uzbekistan  2009    male  55-74 years           81   \n",
       "27751           Uzbekistan  2009    male  15-24 years          242   \n",
       "27752           Uzbekistan  2009  female  15-24 years          186   \n",
       "27753           Uzbekistan  2009  female  25-34 years           85   \n",
       "27754           Uzbekistan  2009    male    75+ years            7   \n",
       "27755           Uzbekistan  2009  female    75+ years            7   \n",
       "27756           Uzbekistan  2009  female  35-54 years           65   \n",
       "27757           Uzbekistan  2009  female  55-74 years           15   \n",
       "27758           Uzbekistan  2009    male   5-14 years           37   \n",
       "27759           Uzbekistan  2009  female   5-14 years           18   \n",
       "\n",
       "       population  suicides/100k pop             country-year  HDI for year  \\\n",
       "240        270003               0.00              Albania2009           NaN   \n",
       "241        182712               0.00              Albania2009           NaN   \n",
       "242        394286               0.00              Albania2009           NaN   \n",
       "243        236174               0.00              Albania2009           NaN   \n",
       "244        233302               0.00              Albania2009           NaN   \n",
       "245         61582               0.00              Albania2009           NaN   \n",
       "246        283448               0.00              Albania2009           NaN   \n",
       "247        174955               0.00              Albania2009           NaN   \n",
       "248        374365               0.00              Albania2009           NaN   \n",
       "249        253007               0.00              Albania2009           NaN   \n",
       "250        234570               0.00              Albania2009           NaN   \n",
       "251         47331               0.00              Albania2009           NaN   \n",
       "528          8199               0.00  Antigua and Barbuda2009           NaN   \n",
       "529          6917               0.00  Antigua and Barbuda2009           NaN   \n",
       "530         14629               0.00  Antigua and Barbuda2009           NaN   \n",
       "531          8514               0.00  Antigua and Barbuda2009           NaN   \n",
       "532          4793               0.00  Antigua and Barbuda2009           NaN   \n",
       "533          1571               0.00  Antigua and Barbuda2009           NaN   \n",
       "534          7489               0.00  Antigua and Barbuda2009           NaN   \n",
       "535          6325               0.00  Antigua and Barbuda2009           NaN   \n",
       "536         12978               0.00  Antigua and Barbuda2009           NaN   \n",
       "537          8599               0.00  Antigua and Barbuda2009           NaN   \n",
       "538          4349               0.00  Antigua and Barbuda2009           NaN   \n",
       "539          1042               0.00  Antigua and Barbuda2009           NaN   \n",
       "876        653486              27.09            Argentina2009           NaN   \n",
       "877       3436265              17.72            Argentina2009           NaN   \n",
       "878       2683502              16.17            Argentina2009           NaN   \n",
       "879       3210244              15.70            Argentina2009           NaN   \n",
       "880       4566645              11.87            Argentina2009           NaN   \n",
       "881       3342385               4.91            Argentina2009           NaN   \n",
       "...           ...                ...                      ...           ...   \n",
       "27142    29296258               6.40        United States2009           NaN   \n",
       "27143    19992900               5.14        United States2009           NaN   \n",
       "27144    21299140               3.64        United States2009           NaN   \n",
       "27145    11101144               3.50        United States2009           NaN   \n",
       "27146    21139852               0.83        United States2009           NaN   \n",
       "27147    20181953               0.45        United States2009           NaN   \n",
       "27484       76759              76.86              Uruguay2009           NaN   \n",
       "27485      253331              39.08              Uruguay2009           NaN   \n",
       "27486      238754              33.09              Uruguay2009           NaN   \n",
       "27487      401900              26.62              Uruguay2009           NaN   \n",
       "27488      260287              24.59              Uruguay2009           NaN   \n",
       "27489      147420               9.50              Uruguay2009           NaN   \n",
       "27490      306049               9.15              Uruguay2009           NaN   \n",
       "27491      424092               8.25              Uruguay2009           NaN   \n",
       "27492      251731               5.16              Uruguay2009           NaN   \n",
       "27493      237146               5.06              Uruguay2009           NaN   \n",
       "27494      253321               0.39              Uruguay2009           NaN   \n",
       "27495      263516               0.00              Uruguay2009           NaN   \n",
       "27748     3072025              13.15           Uzbekistan2009           NaN   \n",
       "27749     2295850              10.98           Uzbekistan2009           NaN   \n",
       "27750      985960               8.22           Uzbekistan2009           NaN   \n",
       "27751     3176656               7.62           Uzbekistan2009           NaN   \n",
       "27752     3079271               6.04           Uzbekistan2009           NaN   \n",
       "27753     2313972               3.67           Uzbekistan2009           NaN   \n",
       "27754      192006               3.65           Uzbekistan2009           NaN   \n",
       "27755      318983               2.19           Uzbekistan2009           NaN   \n",
       "27756     3263931               1.99           Uzbekistan2009           NaN   \n",
       "27757     1105076               1.36           Uzbekistan2009           NaN   \n",
       "27758     2805898               1.32           Uzbekistan2009           NaN   \n",
       "27759     2678474               0.67           Uzbekistan2009           NaN   \n",
       "\n",
       "        gdp_for_year ($)   gdp_per_capita ($)    generation  \n",
       "240        12,044,212,904                4387    Millenials  \n",
       "241        12,044,212,904                4387  Generation X  \n",
       "242        12,044,212,904                4387       Boomers  \n",
       "243        12,044,212,904                4387  Generation Z  \n",
       "244        12,044,212,904                4387        Silent  \n",
       "245        12,044,212,904                4387        Silent  \n",
       "246        12,044,212,904                4387    Millenials  \n",
       "247        12,044,212,904                4387  Generation X  \n",
       "248        12,044,212,904                4387       Boomers  \n",
       "249        12,044,212,904                4387  Generation Z  \n",
       "250        12,044,212,904                4387        Silent  \n",
       "251        12,044,212,904                4387        Silent  \n",
       "528         1,224,253,000               14335    Millenials  \n",
       "529         1,224,253,000               14335  Generation X  \n",
       "530         1,224,253,000               14335       Boomers  \n",
       "531         1,224,253,000               14335  Generation Z  \n",
       "532         1,224,253,000               14335        Silent  \n",
       "533         1,224,253,000               14335        Silent  \n",
       "534         1,224,253,000               14335    Millenials  \n",
       "535         1,224,253,000               14335  Generation X  \n",
       "536         1,224,253,000               14335       Boomers  \n",
       "537         1,224,253,000               14335  Generation Z  \n",
       "538         1,224,253,000               14335        Silent  \n",
       "539         1,224,253,000               14335        Silent  \n",
       "876       332,976,484,578                8961        Silent  \n",
       "877       332,976,484,578                8961    Millenials  \n",
       "878       332,976,484,578                8961        Silent  \n",
       "879       332,976,484,578                8961  Generation X  \n",
       "880       332,976,484,578                8961       Boomers  \n",
       "881       332,976,484,578                8961    Millenials  \n",
       "...                   ...                 ...           ...  \n",
       "27142  14,418,739,000,000               50563        Silent  \n",
       "27143  14,418,739,000,000               50563  Generation X  \n",
       "27144  14,418,739,000,000               50563    Millenials  \n",
       "27145  14,418,739,000,000               50563        Silent  \n",
       "27146  14,418,739,000,000               50563  Generation Z  \n",
       "27147  14,418,739,000,000               50563  Generation Z  \n",
       "27484      31,660,911,277               10166        Silent  \n",
       "27485      31,660,911,277               10166        Silent  \n",
       "27486      31,660,911,277               10166  Generation X  \n",
       "27487      31,660,911,277               10166       Boomers  \n",
       "27488      31,660,911,277               10166    Millenials  \n",
       "27489      31,660,911,277               10166        Silent  \n",
       "27490      31,660,911,277               10166        Silent  \n",
       "27491      31,660,911,277               10166       Boomers  \n",
       "27492      31,660,911,277               10166    Millenials  \n",
       "27493      31,660,911,277               10166  Generation X  \n",
       "27494      31,660,911,277               10166  Generation Z  \n",
       "27495      31,660,911,277               10166  Generation Z  \n",
       "27748      33,689,223,673                1332       Boomers  \n",
       "27749      33,689,223,673                1332  Generation X  \n",
       "27750      33,689,223,673                1332        Silent  \n",
       "27751      33,689,223,673                1332    Millenials  \n",
       "27752      33,689,223,673                1332    Millenials  \n",
       "27753      33,689,223,673                1332  Generation X  \n",
       "27754      33,689,223,673                1332        Silent  \n",
       "27755      33,689,223,673                1332        Silent  \n",
       "27756      33,689,223,673                1332       Boomers  \n",
       "27757      33,689,223,673                1332        Silent  \n",
       "27758      33,689,223,673                1332  Generation Z  \n",
       "27759      33,689,223,673                1332  Generation Z  \n",
       "\n",
       "[1068 rows x 12 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "suicides_2009 = suicidedf.loc[lambda df: suicidedf[\"year\"] == 2009, :]\n",
    "suicides_2009"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "suic_2009_agg = suicides_2009.groupby('country')['suicides_no', 'population'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "suic_2009_agg['suicide rate (# per 100000)'] = suic_2009_agg['suicides_no'] / suic_2009_agg['population'] * 100000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "suic_2009_agg['GDPpc'] = suicides_2009.groupby('country')['gdp_per_capita ($)'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>suicides_no</th>\n",
       "      <th>population</th>\n",
       "      <th>suicide rate (# per 100000)</th>\n",
       "      <th>GDPpc</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>country</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>0</td>\n",
       "      <td>2745735</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Antigua and Barbuda</th>\n",
       "      <td>0</td>\n",
       "      <td>85405</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Argentina</th>\n",
       "      <td>2884</td>\n",
       "      <td>37158001</td>\n",
       "      <td>7.761451</td>\n",
       "      <td>8961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Armenia</th>\n",
       "      <td>53</td>\n",
       "      <td>2689695</td>\n",
       "      <td>1.970484</td>\n",
       "      <td>3215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aruba</th>\n",
       "      <td>4</td>\n",
       "      <td>94795</td>\n",
       "      <td>4.219632</td>\n",
       "      <td>26361</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     suicides_no  population  suicide rate (# per 100000)  \\\n",
       "country                                                                     \n",
       "Albania                        0     2745735                     0.000000   \n",
       "Antigua and Barbuda            0       85405                     0.000000   \n",
       "Argentina                   2884    37158001                     7.761451   \n",
       "Armenia                       53     2689695                     1.970484   \n",
       "Aruba                          4       94795                     4.219632   \n",
       "\n",
       "                     GDPpc  \n",
       "country                     \n",
       "Albania               4387  \n",
       "Antigua and Barbuda  14335  \n",
       "Argentina             8961  \n",
       "Armenia               3215  \n",
       "Aruba                26361  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "suic_2009_agg.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = suic_2009_agg['GDPpc']\n",
    "y = suic_2009_agg['suicide rate (# per 100000)']\n",
    "plt.scatter(x,y,c='green')\n",
    "plt.xlabel('GPD per capita ($)')\n",
    "plt.ylabel('Suicides per 100000 People')\n",
    "plt.title('2009 Country Suicide Rates vs. GDP Per Capita')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This correlation does show very distinct trends in the relationship between GDP per capita and suicide rate for a country for the year of 2009. The triangular shape of the data suggests that there is no correlation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'coun_age_suic' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-27-32a8e0187b9c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mtime_age_suic\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msuicidedf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"year\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"age\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'suicides_no'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'population'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mtime_age_suic\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'suicides per 100000'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcoun_age_suic\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'suicides_no'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mcoun_age_suic\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'population'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m100000\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;31m# time_age_suic\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# this proved to be too complicated to use because it requires multiindexing to pull out the data which I would need help with\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'coun_age_suic' is not defined"
     ]
    }
   ],
   "source": [
    "time_age_suic = suicidedf.groupby([\"year\",\"age\"])['suicides_no','population'].sum()\n",
    "time_age_suic['suicides per 100000'] = coun_age_suic['suicides_no'] / coun_age_suic['population'] * 100000\n",
    "# time_age_suic\n",
    "# this proved to be too complicated to use because it requires multiindexing to pull out the data which I would need help with"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "#small = suicidedf.loc[lambda df: suicidedf['age'] == '5-14 years', :].groupby('year').sum()\n",
    "#teen = suicidedf.loc[lambda df: suicidedf['age'] == '15-24 years', :].groupby('year').sum()\n",
    "#mill = suicidedf.loc[lambda df: suicidedf['age'] == '25-34 years', :].groupby('year').sum()\n",
    "#genx = suicidedf.loc[lambda df: suicidedf['age'] == '35-54 years', :].groupby('year').sum()\n",
    "#boom = suicidedf.loc[lambda df: suicidedf['age'] == '55-74 years', :].groupby('year').sum()\n",
    "#elde = suicidedf.loc[lambda df: suicidedf['age'] == '75+ years', :].groupby('year').sum()\n",
    "\n",
    "#small['suicides per 100000'] = small['suicides_no'] / small['population'] * 100000\n",
    "#teen['suicides per 100000'] = teen['suicides_no'] / teen['population'] * 100000\n",
    "#mill['suicides per 100000'] = mill['suicides_no'] / mill['population'] * 100000\n",
    "#genx['suicides per 100000'] = genx['suicides_no'] / genx['population'] * 100000\n",
    "#boom['suicides per 100000'] = boom['suicides_no'] / boom['population'] * 100000\n",
    "#elde['suicides per 100000'] = elde['suicides_no'] / elde['population'] * 100000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'DataFrame' objects are mutable, thus they cannot be hashed",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-54-b04527f77176>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mAgeDict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0msmall\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\"5-14 years\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mteen\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m'15-24 years'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmill\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\"25-34 years\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mgenx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\"35-54 years\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mboom\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\"55-74 years\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0melde\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\"75+ years\"\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mAgeDict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msuicidedf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msuicidedf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'age'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'year'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mkey\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'suicides per 100000'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'suicides_no'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'population'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m100000\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__hash__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1815\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__hash__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1816\u001b[0m         raise TypeError('{0!r} objects are mutable, thus they cannot be'\n\u001b[0;32m-> 1817\u001b[0;31m                         ' hashed'.format(self.__class__.__name__))\n\u001b[0m\u001b[1;32m   1818\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1819\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__iter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: 'DataFrame' objects are mutable, thus they cannot be hashed"
     ]
    }
   ],
   "source": [
    "AgeDict = {small:\"5-14 years\",teen:'15-24 years',mill:\"25-34 years\",genx:\"35-54 years\",boom:\"55-74 years\",elde:\"75+ years\"}\n",
    "\n",
    "for key, value in AgeDict:\n",
    "    key = suicidedf[suicidedf['age'] == value].groupby('year').sum()\n",
    "    key['suicides per 100000'] = key['suicides_no'] / key['population'] * 100000\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Suicide Rates Over Time for 5-14 Year Olds')"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15, 5))\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "# plt.plot(small['suicides per 100000'])\n",
    "plt.plot(teen['suicides per 100000'], color='purple', label=\"15-24\")\n",
    "plt.plot(mill['suicides per 100000'], color='green', label=\"25-34\")\n",
    "plt.plot(genx['suicides per 100000'], color='red', label=\"35-54\")\n",
    "plt.plot(boom['suicides per 100000'], color='yellow', label=\"55-74\")\n",
    "plt.plot(elde['suicides per 100000'], color='orange', label=\"75+\")\n",
    "plt.ylabel('suicides per 100000')\n",
    "plt.xlabel('year')\n",
    "plt.title(\"Suicides Rates Over time by Age\")\n",
    "plt.legend(loc='upper right')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.plot(small['suicides per 100000'])\n",
    "plt.ylabel(\"suicide per 100000\")\n",
    "plt.xlabel('year')\n",
    "plt.title(\"Suicide Rates Over Time for 5-14 Year Olds\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The two graphs above show that suicide rates increase with increasing age group. But on the whole, suicides rates are decreasing across all age groups around the world, with the exception of 5-14 year olds. While the 5-14 year old suicide rate is quite low compared to other age demographics, it continues to remain volatile."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Generation X', 'Silent', 'G.I. Generation', 'Boomers',\n",
       "       'Millenials', 'Generation Z'], dtype=object)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "suicidedf['generation'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "gigen = suicidedf[suicidedf['generation'] == 'G.I. Generation'].groupby('year').sum()\n",
    "silen = suicidedf[suicidedf['generation'] == 'Silent'].groupby('year').sum()\n",
    "boomr = suicidedf[suicidedf['generation'] == 'Boomers'].groupby('year').sum()\n",
    "genex = suicidedf[suicidedf['generation'] == 'Generation X'].groupby('year').sum()\n",
    "millen = suicidedf[suicidedf['generation'] == 'Millenials'].groupby('year').sum()\n",
    "genez = suicidedf[suicidedf['generation'] == 'Generation Z'].groupby('year').sum()\n",
    "\n",
    "gigen['suicides per 100000'] = gigen['suicides_no'] / gigen['population'] * 100000\n",
    "silen['suicides per 100000'] = silen['suicides_no'] / silen['population'] * 100000\n",
    "boomr['suicides per 100000'] = boomr['suicides_no'] / boomr['population'] * 100000\n",
    "genex['suicides per 100000'] = genex['suicides_no'] / genex['population'] * 100000\n",
    "millen['suicides per 100000'] = millen['suicides_no'] / millen['population'] * 100000\n",
    "genez['suicides per 100000'] = genez['suicides_no'] / genez['population'] * 100000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Suicides Rates Over time by Generation')"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(gigen['suicides per 100000'], label=\"G.I. Gen\")\n",
    "plt.plot(silen['suicides per 100000'], color='purple', label = 'Silent')\n",
    "plt.plot(boomr['suicides per 100000'], color='green', label = 'Baby Boomer')\n",
    "plt.plot(genex['suicides per 100000'], color='red', label = 'GenX')\n",
    "plt.plot(millen['suicides per 100000'], color='yellow', label = 'Millenial')\n",
    "plt.plot(genez['suicides per 100000'], color='orange', label = 'GenZ')\n",
    "plt.ylabel(\"suicides per 100000\")\n",
    "plt.xlabel('year')\n",
    "plt.legend(loc='upper right')\n",
    "plt.title(\"Suicides Rates Over time by Generation\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Suicides rates of a generation rise over time and steadily decrease as members of that generation experiences natural death as result of aging; as the generation dies, the number of people dying naturally outpaces and perhaps eliminates those were susceptible to suicide. The suicide rate of the Silent Generation and Baby Boomers peaked during the same year, with a slight uptick in the suicide rate of Silent Generation members in 2010."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
